RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,Model,Data)
RSMIndividual<-function(tableModel,tableData,Model,Data){
#Select the biggest table
if (ncol(tableModel)>ncol(tableData)){
tableMother<-tableData
tableDaugther<-tableModel
}else {tableMother<-tableModel
tableDaugther<-tableData}
tableCorrelation<-as_tibble(vector(mode='numeric',length=ncol(tableMother)))
tableDaugther2<-tableDaugther%>%
filter(tableDaugther$var1>tableDaugther$var2)
tableMother2<-tableMother%>%
filter(tableMother$var1>tableMother$var2)
for(i in 3:(ncol(tableMother)-1)) { #starts in column three
single<-tableMother2[,i]
single[,2]<-tableDaugther2[,which( colnames(tableDaugther2)==names(tableMother2[i]))]
corrspSingle<- rcorr(as.matrix(single), type="spearman")
tableCorrelation[i-2,]<-corrspSingle$r[2]
}
tableCorrelation<-tableCorrelation%>%drop_na()
corrMatrixVpName<-paste(Model,Data,"tableCorrelation",sep= "_")
assign(corrMatrixVpName, tableCorrelation,envir = globalenv())
tableCorrelationPlot<-tableCorrelation
tableCorrelationPlot$x<-1
onewayTTest<- t.test(tableCorrelation, mu = 0, alternative = "two.sided")
plotDistribution <- ggplot(tableCorrelationPlot, aes(y = value,x = x)) +
geom_violin(position = position_dodge(width = 0.9)) +
geom_quasirandom(dodge.width = 0.9, varwidth = TRUE)+
stat_summary(fun="mean",color="red", geom="point", size=5)+
# annotate("text", x=.75, y=max(tableCorrelation$value)+mean(tableCorrelation$value), label= paste("p-value:",onewayTTest[["p.value"]], sep = " "),
#          col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=max(tableCorrelation$value), label= paste("p-value:",onewayTTest[["p.value"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=mean(tableCorrelation$value),#*3,
label= paste("t-value:",onewayTTest[["statistic"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=min(tableCorrelation$value),#*4,
label= paste("Mean:",mean(tableCorrelationPlot$value), sep = " "),
col="blue", size=5, parse=TRUE)
plotDistribution
}
Model<-"SCRSingle"
Data<- "SCRArousal"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,Model,Data)
Model<-"SCRSingle"
Data<- "SCRArousal"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_invAK_corr_prep_all,Model,Data)
# 3.
RSMSingleValueAK(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
## sort  participant, and valence
emg_rat_1<- emg_rat%>%
arrange_at ("valence_rating")%>%
arrange_at("ID")
#create a new variable that "counts the trials based on their arousal rating
j<-1
emg_rat_1$sortAro<-0
for (i in 1:nrow(emg_rat_1)){
if (i< nrow(emg_rat_1)){
if(emg_rat_1$ID[i]==  emg_rat_1$ID[i+1]){
emg_rat_1$sortAro[i]<-j
j <- j+1
}
else{
emg_rat_1$sortAro[i]<-j
j <-1
}
else {emg_rat_1$sortAro[i]<-j
}
PicEdaArosVAlina<-emg_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,TAmplitudes)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicEdaArosVAlina$TAmplitudes, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"emg_SingleAlina"
sortType<- "Valence"
# 1.
RSMSingleValue(PicEdaArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
# RSM for Behavioral DAT
PicBehavArosVAlina<-emg_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,valence_rating)%>%
rename(Behavioral= valence_rating)
PicBehavArosVAlina$Behavioral<-as.numeric(PicBehavArosVAlina$Behavioral)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicBehavArosVAlina$Behavioral, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"BehavioralSingleAlina"
sortType<- "Valence"
OriginalData<-PicBehavArosVAlina
#2.
RSMSingleValue(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
# 3.
VariableType<-"BehavioralSingleAlina_invAK"
sortType<- "Valence"
RSMSingleValueAK(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
#  Behav_Single_corr_prep_all
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ArousalRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
#  Behav_Single_corr_prep_all
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ValenceRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
#AK
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ValenceRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_invAK_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
Model<-"SCRSingle"
Data<- "SCRValence"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,Model,Data)
Model<-"SCRSingle"
Data<- "SCRValence"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_invAK_corr_prep_all,Model,Data)
View(emg_rat_1)
View(PicEdaArosVAlina)
MaxValue<- max(PicEdaArosVAlina$TAmplitudes, na.rm=T)
#  Behav_Single_corr_prep_all
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ValenceRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
VariableModel<- "ValenceRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
# RSA based on ASM data
### 1. RSA ASM x SCR
load("./data/asm_scr_proofed.Rdata")
load("./data/df_rat.Rdata")
#test with Alina's data set. Please note that not all participants are used for the test.
#Note. how the variable ID is extracted is not applicable to all participants. For this reason,
#VP201 is filter (N cases for that participant over 1000)
# carlos:
# scr$ID<- str_sub(scr$Subject,9,-1L)
# scr$picNum<-str_sub(scr$Stimulus,11,-1L)
# df_rat$picNum<-str_sub(df_rat$picture,1,6)
## by alina:
scr$ID = sub('.*(\\d{3}).*', '\\1', scr$Subject)
scr_sub =scr %>% select(Subject, ID, project, Stimulus,logAmplitudes,NumberOfTimePresented) %>% unique() # to be added  Q_LTE_di, Q_CTQ_di, Q_STAIT_sum, Q_BDI_sum
scr_sub$picNum<-str_sub(scr_sub$Stimulus,11,-1L)
scr_sub$Stimulus = NULL
scr_sub$ID = gsub("[^0-9.-]", "",scr_sub$ID)
scr_sub$ID = gsub("^0", "", scr_sub$ID)
# prep df_rat
df_rat$picNum<-str_sub(df_rat$picture,1,6)
df_rat$picture = NULL
df_rat_scr = merge(scr_sub, df_rat, by = c("ID", "project", "picNum"))
#detach(package:plyr) # if "sanity" is empty
sanity = df_rat_scr %>% group_by(Subject) %>% tally()
### why log amplitudes?
scrAlina<-df_rat_scr%>%select(ID,project, picNum,logAmplitudes,NumberOfTimePresented, arousal_rating)#%>%
#filter(ID!="") # not needed anymore
### why is this subject excluded?
#df_ratAlina<-df_rat%>%select(ID,picNum,arousal_rating)%>%
#  filter(ID!=201)
#scr_rat<-inner_join(scrAlina,df_ratAlina, by= c("ID", "picNum"), keep=F)
#N = 252
# get old ID structure back, if needed
scrAlina$ID <- paste(scrAlina$project ,scrAlina$ID ,  sep = "_")
scrAlina$project = NULL
scr_rat = scrAlina
# new: n = 494
#correlation between time presented 1 and two
# alina comment: the cor() function works only when the datasets have equal length, which they do, but when removing NA's they become unequal, see code below
test1 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1]
test2 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2]
# table(is.na(test1))
#
# FALSE  TRUE
# 17646   138
# > table(is.na(test2))
#
# FALSE  TRUE
# 17570   214
# --> problem comes from NA differences
# solution:
test_df = cbind(test1, test2)
test_df = as.data.frame(test_df)
test_df_clean = test_df %>% drop_na()
cor(test_df_clean)
## solve it in dataset scr_rats
# Remove rows with NA values in 'logAmplitudes', considering duplicates in 'ID' and 'picNum'
scr_rat <- scr_rat %>%
group_by(ID, picNum) %>%
filter(!any(is.na(logAmplitudes))) %>%
ungroup()
cor(scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1],
scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2],
method= "spearman")
#---------------------------------------------------------------------------------------------------------
# Functions to round the floor and ceiling function to a decimal.
floor_dec <- function(x, level=1) round(x - 5*10^(-level-1), level)
ceiling_dec <- function(x, level=1) round(x + 5*10^(-level-1), level)
#Function to extract the last n characters:
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
# RSA based on ASM data
### 1. RSA ASM x SCR
load("./data/asm_scr_proofed.Rdata")
load("./data/df_rat.Rdata")
#test with Alina's data set. Please note that not all participants are used for the test.
#Note. how the variable ID is extracted is not applicable to all participants. For this reason,
#VP201 is filter (N cases for that participant over 1000)
# carlos:
# scr$ID<- str_sub(scr$Subject,9,-1L)
# scr$picNum<-str_sub(scr$Stimulus,11,-1L)
# df_rat$picNum<-str_sub(df_rat$picture,1,6)
## by alina:
scr$ID = sub('.*(\\d{3}).*', '\\1', scr$Subject)
scr_sub =scr %>% select(Subject, ID, project, Stimulus,logAmplitudes,NumberOfTimePresented) %>% unique() # to be added  Q_LTE_di, Q_CTQ_di, Q_STAIT_sum, Q_BDI_sum
#######
##Libraries
library(base)
library(psycho)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(fs)
library (lme4)
library(lmerTest)
library(sjPlot)
library(rstatix)
library(Hmisc)
# install.packages("extrafont")
library(extrafont)
library (ggbeeswarm)
library(BayesFactor)
library(bayestestR)
library(glue)
# RSA based on ASM data
### 1. RSA ASM x SCR
load("./data/asm_scr_proofed.Rdata")
load("./data/df_rat.Rdata")
#test with Alina's data set. Please note that not all participants are used for the test.
#Note. how the variable ID is extracted is not applicable to all participants. For this reason,
#VP201 is filter (N cases for that participant over 1000)
# carlos:
# scr$ID<- str_sub(scr$Subject,9,-1L)
# scr$picNum<-str_sub(scr$Stimulus,11,-1L)
# df_rat$picNum<-str_sub(df_rat$picture,1,6)
## by alina:
scr$ID = sub('.*(\\d{3}).*', '\\1', scr$Subject)
scr_sub =scr %>% select(Subject, ID, project, Stimulus,logAmplitudes,NumberOfTimePresented) %>% unique() # to be added  Q_LTE_di, Q_CTQ_di, Q_STAIT_sum, Q_BDI_sum
scr_sub$picNum<-str_sub(scr_sub$Stimulus,11,-1L)
scr_sub$Stimulus = NULL
scr_sub$ID = gsub("[^0-9.-]", "",scr_sub$ID)
scr_sub$ID = gsub("^0", "", scr_sub$ID)
# prep df_rat
df_rat$picNum<-str_sub(df_rat$picture,1,6)
df_rat$picture = NULL
df_rat_scr = merge(scr_sub, df_rat, by = c("ID", "project", "picNum"))
#detach(package:plyr) # if "sanity" is empty
sanity = df_rat_scr %>% group_by(Subject) %>% tally()
### why log amplitudes?
scrAlina<-df_rat_scr%>%select(ID,project, picNum,logAmplitudes,NumberOfTimePresented, arousal_rating)#%>%
#filter(ID!="") # not needed anymore
### why is this subject excluded?
#df_ratAlina<-df_rat%>%select(ID,picNum,arousal_rating)%>%
#  filter(ID!=201)
#scr_rat<-inner_join(scrAlina,df_ratAlina, by= c("ID", "picNum"), keep=F)
#N = 252
# get old ID structure back, if needed
scrAlina$ID <- paste(scrAlina$project ,scrAlina$ID ,  sep = "_")
scrAlina$project = NULL
scr_rat = scrAlina
# new: n = 494
#correlation between time presented 1 and two
# alina comment: the cor() function works only when the datasets have equal length, which they do, but when removing NA's they become unequal, see code below
test1 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1]
test2 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2]
# table(is.na(test1))
#
# FALSE  TRUE
# 17646   138
# > table(is.na(test2))
#
# FALSE  TRUE
# 17570   214
# --> problem comes from NA differences
# solution:
test_df = cbind(test1, test2)
test_df = as.data.frame(test_df)
test_df_clean = test_df %>% drop_na()
cor(test_df_clean)
## solve it in dataset scr_rats
# Remove rows with NA values in 'logAmplitudes', considering duplicates in 'ID' and 'picNum'
scr_rat <- scr_rat %>%
group_by(ID, picNum) %>%
filter(!any(is.na(logAmplitudes))) %>%
ungroup()
cor(scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1],
scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2],
method= "spearman")
#### end change alina
################################################################
##### new functions added: picture presentation / non-responder
AverageResponsesacrossruns<- 1# determine whether average across trials if set to zero takes the first run.
if (AverageResponsesacrossruns==1){
ntrials<-72
scrAlinacounZeros<-scrAlina%>%
filter(logAmplitudes==0)%>%
# filter(NumberOfTimePresented==1)%>%
select(ID,logAmplitudes)
VPZeros<-as.data.frame(table(scrAlinacounZeros$ID))
names(VPZeros)<- c("ID", "Freq")
}else{
ntrials<-36
scrAlinacounZeros<-scrAlina%>%
filter(logAmplitudes==0)%>%
filter(NumberOfTimePresented==1)%>%
select(ID,logAmplitudes)
VPZeros<-as.data.frame(table(scrAlinacounZeros$ID))
names(VPZeros)<- c("ID", "Freq")
}
removeNonResponders<-0
RespondersRate<- .33
if (removeNonResponders==1){
VPZerosfilt<-VPZeros%>% filter(Freq> ntrials-ntrials*RespondersRate)
scrAlina<-anti_join(scrAlina,VPZerosfilt, by = "ID" )
}
# df_ratAlina<-scrAlina%>%select(ID,picNum,arousal_rating) #%>%
# filter(ID!=201)%>%
# filter(ID!= 126 & ID!= 144) #filter nonresponders in any trial
# scr_rat<-inner_join(scrAlina,df_ratAlina, by= c("ID", "picNum"), keep=F)
#View(table(scr_rat$ID)); N = 252 with filtering, N = 166
#correlation between time presented 1 and two
cor(scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1],
scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2], method= "spearman")
#for the test, and given the relatively low correlation take only first presentation
if (AverageResponsesacrossruns==1){
scr_rat$arousal_rating<-as.numeric(scr_rat$arousal_rating)
scr_rat_1<-scr_rat%>%
group_by(ID,picNum)%>%
dplyr::summarise(logAmplitudes=mean(logAmplitudes, na.rm =T),
arousal_rating=mean(arousal_rating,na.rm=T))
scr_rat_1<-scr_rat_1%>%ungroup()
}else{scr_rat_1<-scr_rat%>%filter(NumberOfTimePresented==1)}
##############################################################
#for the test, and given the relatively low correlation take only first presentation
#scr_rat_1<-scr_rat%>%filter(NumberOfTimePresented==1)
## sort  participant, and arousal
scr_rat_1<- scr_rat_1%>%
arrange_at ("arousal_rating")%>%
arrange_at("ID")
#create a new variable that "counts the trials based on their arousal rating
j<-1
scr_rat_1$sortAro<-0
for (i in 1:nrow(scr_rat_1)){
if (i< nrow(scr_rat_1)){
if(scr_rat_1$ID[i]==  scr_rat_1$ID[i+1]){
scr_rat_1$sortAro[i]<-j
j <- j+1
}
else{
scr_rat_1$sortAro[i]<-j
j <-1
}
else {scr_rat_1$sortAro[i]<-j
}
PicEdaArosVAlina<-scr_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,logAmplitudes)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicEdaArosVAlina$logAmplitudes, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"SCR_SingleAlina"
sortType<- "Arousal"
sp<-OriginalData%>%
dplyr::select(1,2, 3:ncol(OriginalData))
OriginalData = PicEdaArosVAlina
sp<-OriginalData%>%
dplyr::select(1,2, 3:ncol(OriginalData))
View(sp)
##### Matrices necessary.
Vp_count<- table(OriginalData[1])
vp_count
Vp_count
table(Vp_count)
Vp_count<-as_tibble(Vp_count)
View(Vp_count)
##Create a 3d matrix where the correlations will be saved.
corrMatrixVp<- array(0, dim = c(nVariables,nVariables,nrow(Vp_count)))
corrMatrixVpSingle<- as_tibble(data.frame(matrix(data= 0, nrow=nVariables, ncol=nVariables)))
View(corrMatrixVpSingle)
#################################################
#Create Matrix for Physiological variable for each participant
#################################################
Single<-sp%>%
filter(.[[1]] == Vp_count$VP[i])
i = 1
#################################################
#Create Matrix for Physiological variable for each participant
#################################################
Single<-sp%>%
filter(.[[1]] == Vp_count$VP[i])
1: length(Vp_count$VP
)
Single<-sp%>%
filter(.[[1]] == Vp_count$ID[i])
gaSingle<- Single%>%
spread(sort,ncol(Single))
View(gaSingle)
for(ii in 1:(length(gaSingle)-1)) {
for (iii in 1:(length(gaSingle)-1)) {
corrMatrixVpSingle[ii,iii]= MaxValue-(abs(gaSingle[1,ii+1]-gaSingle[1,iii+1]))
}
View(corrMatrixVpSingle)
corrMatrixVpSingle2<-as.matrix(corrMatrixVpSingle)
corrMatrixVp[,,i]<-corrMatrixVpSingle2
corrMatrixVp
corr_prep<- corrMatrixVpSingle%>%
as_tibble(rownames = "var1") %>%
gather(var2, value, -var1)
View(corr_prep)
corr_prep$var2<-str_sub(corr_prep$var2,2,-1L)
View(corr_prep)
corr_prep$var1<-as.numeric(corr_prep$var1)
corr_prep$var2<-as.numeric(corr_prep$var2)
VP_name<- Vp_count$VP[i]
VP_name<- Vp_count$ID[i]
Vp_name<-as.character(Vp_count$VP[i])
VP_name<- Vp_count$ID[i]
Vp_name<-as.character(Vp_count$VP[i])
Vp_name<-as.character(Vp_count$ID[i]) #alina
new_name<- paste("VP",Vp_name, sep= "")
corr_prep<-corr_prep%>%
arrange_at("var1")%>%
arrange_at("var2")
View(corr_prep)
names(corr_prep)[3]<- new_name
if(i==1){
corr_prep_all<- corr_prep
}else{corr_prep_all<- inner_join(corr_prep_all, corr_prep, by= c("var1"= "var1", "var2"= "var2"))}
# class(corrMatrixVp)
for(i in 1: length(Vp_count$VP)) {
#################################################
#Create Matrix for Physiological variable for each participant
#################################################
Single<-sp%>%
filter(.[[1]] == Vp_count$ID[i]) # alina
gaSingle<- Single%>%
spread(sort,ncol(Single))  #line with all SCR responses for one subject
for(ii in 1:(length(gaSingle)-1)) {
for (iii in 1:(length(gaSingle)-1)) {
corrMatrixVpSingle[ii,iii]= MaxValue-(abs(gaSingle[1,ii+1]-gaSingle[1,iii+1]))
}
corrMatrixVpSingle2<-as.matrix(corrMatrixVpSingle)
corrMatrixVp[,,i]<-corrMatrixVpSingle2
corr_prep<- corrMatrixVpSingle%>%
as_tibble(rownames = "var1") %>%
gather(var2, value, -var1)
corr_prep$var2<-str_sub(corr_prep$var2,2,-1L)
corr_prep$var1<-as.numeric(corr_prep$var1)
corr_prep$var2<-as.numeric(corr_prep$var2)
VP_name<- Vp_count$ID[i] #alina
Vp_name<-as.character(Vp_count$ID[i]) #alina
new_name<- paste("VP",Vp_name, sep= "")
corr_prep<-corr_prep%>%
arrange_at("var1")%>%
arrange_at("var2")
names(corr_prep)[3]<- new_name
if(i==1){
corr_prep_all<- corr_prep
}else{corr_prep_all<- inner_join(corr_prep_all, corr_prep, by= c("var1"= "var1", "var2"= "var2"))}
}
if(i==1){
corr_prep_all<- corr_prep
}else{corr_prep_all<- inner_join(corr_prep_all, corr_prep, by= c("var1"= "var1", "var2"= "var2"))}
corr_prep_all<-corr_prep_all[ , colSums(is.na(corr_prep_all)) == 0] #Remove columns with NA N = 37
View(corr_prep_all)
corr_prep_all$mean_all<- rowMeans(subset(corr_prep_all,select= c(3:ncol(corr_prep_all)), na.rm = T))
corrMatrixVpName<-paste(VariableType,"corrMatrixVp",sep= "_")
corr_prep_allName<-paste(VariableType,"corr_prep_all",sep= "_")
View(corr_prep_all)
assign(corr_prep_allName, corr_prep_all,envir = globalenv())
assign(corrMatrixVpName, corrMatrixVp,envir = globalenv())
################################################################
#-------------- Plot RSM Matrix
mypalette<- colors()[c(73, 30, 28, 124, 635, 86,384,144, 148)]
corr_prepPlot<- corr_prep_all%>%
dplyr::select(var1, var2, mean_all)
min<- floor_dec(min(corr_prepPlot[,3]),2)
max<-ceiling_dec( max(corr_prepPlot[,3][corr_prepPlot[,3] != max(corr_prepPlot[,3])]),2)
cols <- rev(rainbow(20)[-20])
plotRSM<-ggplot(data=corr_prepPlot, aes(x = var1, y = var2, fill = mean_all)) + #value2
geom_tile() +
labs(x = paste("Trials sorted by", sortType), y = paste("Trials sorted by", sortType), fill = "", title = "Correlation Matrix") +
coord_fixed() +
theme_minimal()+
scale_y_continuous(trans = "reverse")+
scale_fill_gradientn(colours=rev(mypalette),na.value = colors() [c(73)], #heat.colors(12)
breaks=c(min, max),labels=c(min, max),
limits=c(min,max))+ theme(legend.position="bottom")+
theme(text=element_text(family="Times", size=12))
return(plotRSM)
plotRSM
