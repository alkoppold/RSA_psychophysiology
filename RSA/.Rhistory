axis.line.x= element_line())+
theme(legend.position="bottom")+
theme(#panel.grid.minor = element_blank(),
panel.background = element_blank())
significanceTest<- which(Perm.test.corr>test.cor)
permPValue<-(nPermutations-significanceTest[1])/nPermutations
bf =correlationBF(CombinedOriginalModel$mean_all[CombinedOriginalModel$RSA==VariableOriginal],
CombinedOriginalModel$mean_all[CombinedOriginalModel$RSA==VariableModel],nullInterval = c(Perm.test.corr[1,], Perm.test.corr[nPermutations/100*95,]))
# bf
bfevidence<- bf[2] / bf[1]
# View(bfevidence)
template <- "A permutation Test was was conducted to compare {VariableOriginal} and  {VariableModel}.
The relation between both RMS was: {test.cor}. The permutation test with percentil 95 was {lim}, the relationship had a p-value of {permPValue}.
the BF10 index was: {bfevidence} "
template2<-glue::glue(
template,
VariableOriginal   = VariableOriginal,
VariableModel     = VariableModel,
test.cor   =round( test.cor,2),
lim     = round(lim,2),
permPValue     = permPValue,
bfevidence= round(bfevidence@bayesFactor[["bf"]],2)
)
mylist<-list (plot.perm, template2)
# return(mylist)
return(mylist)
}
#---------------------------------------------------------------------------------------------------------
#----------------- FUNCTION CREATED TO run compare RSMs with each other for each individual separately.
tableData<-SCR_SingleAlina_corr_prep_all
#################################################
### CODE to search and install a specific package
#################################################
# list.of.packages <- c("base","psycho", "tidyverse", "dplyr", "ggplot2", "fs", "lme4", "lmerTest", "sjPlot")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages)) install.packages(new.packages)
#######
##Libraries
library(base)
library(psycho)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(fs)
library (lme4)
library(lmerTest)
library(sjPlot)
library(rstatix)
library(Hmisc)
# install.packages("extrafont")
library(extrafont)
library (ggbeeswarm)
library(BayesFactor)
library(bayestestR)
library(glue)
#################################################
### Load Fonts for figures
#################################################
#font_import()
loadfonts(device="win")       #Register fonts for Windows bitmap output
fonts()
windowsFonts(Times=windowsFont("Times"))
# setwd("C:/Users/cvent/Desktop/RESEARCH/RSA_LondorfLab")
#Select Task Pasive Picture viewing
SCR_RSM<-readRDS("./scripts/SCR_RSM.rds")
#------------------------
PicEdaAro<-SCR_RSM  %>%
filter(Task_def==1)
#----
#Matrix should contain VP, Behavioral Variable (e.g., Aro),
# variable coding the sorting (sortAro), Variables for the vector (variables containing EDA)
PicEdaAro<-PicEdaAro%>%
select(Vp_ratings,sortAro, contains("EDA"),- contains("EDA_mean"))
#----------------- DEFINE PARAMETERS FOR RUNING RSMVector for EDA and AROUSAL
#rename to favor the function.
PicEdaAro<-PicEdaAro%>%
rename(sort= sortAro)
# OriginalData<-PicEdaAro
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"SCR_Vector"
sortType<- "Arousal"
RSMVector(PicEdaAro,nVariables,CharContainingNumberFromVector,VariableType,sortType)
# RSA based on ASM data
### 1. RSA ASM x SCR
load("./data/asm_scr_proofed.Rdata")
load("./data/df_rat.Rdata")
#test with Alina's data set. Please note that not all participants are used for the test.
#Note. how the variable ID is extracted is not applicable to all participants. For this reason,
#VP201 is filter (N cases for that participant over 1000)
# carlos:
# scr$ID<- str_sub(scr$Subject,9,-1L)
# scr$picNum<-str_sub(scr$Stimulus,11,-1L)
# df_rat$picNum<-str_sub(df_rat$picture,1,6)
## by alina:
scr$ID = sub('.*(\\d{3}).*', '\\1', scr$Subject)
scr_sub =scr %>% select(Subject, ID, project, Stimulus,logAmplitudes,NumberOfTimePresented) %>% unique() # to be added  Q_LTE_di, Q_CTQ_di, Q_STAIT_sum, Q_BDI_sum
scr_sub$picNum<-str_sub(scr_sub$Stimulus,11,-1L)
scr_sub$Stimulus = NULL
scr_sub$ID = gsub("[^0-9.-]", "",scr_sub$ID)
scr_sub$ID = gsub("^0", "", scr_sub$ID)
# prep df_rat
df_rat$picNum<-str_sub(df_rat$picture,1,6)
df_rat$picture = NULL
df_rat_scr = merge(scr_sub, df_rat, by = c("ID", "project", "picNum"))
#detach(package:plyr) # if "sanity" is empty
sanity = df_rat_scr %>% group_by(Subject) %>% tally()
### why log amplitudes?
scrAlina<-df_rat_scr%>%select(ID,project, picNum,logAmplitudes,NumberOfTimePresented, arousal_rating)#%>%
#filter(ID!="") # not needed anymore
### why is this subject excluded?
#df_ratAlina<-df_rat%>%select(ID,picNum,arousal_rating)%>%
#  filter(ID!=201)
#scr_rat<-inner_join(scrAlina,df_ratAlina, by= c("ID", "picNum"), keep=F)
#N = 252
# get old ID structure back, if needed
scrAlina$ID <- paste(scrAlina$project ,scrAlina$ID ,  sep = "_")
scrAlina$project = NULL
scr_rat = scrAlina
# new: n = 494
#correlation between time presented 1 and two
# alina comment: the cor() function works only when the datasets have equal length, which they do, but when removing NA's they become unequal, see code below
test1 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1]
test2 = scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2]
# table(is.na(test1))
#
# FALSE  TRUE
# 17646   138
# > table(is.na(test2))
#
# FALSE  TRUE
# 17570   214
# --> problem comes from NA differences
# solution:
test_df = cbind(test1, test2)
test_df = as.data.frame(test_df)
test_df_clean = test_df %>% drop_na()
cor(test_df_clean)
## solve it in dataset scr_rats
# Remove rows with NA values in 'logAmplitudes', considering duplicates in 'ID' and 'picNum'
scr_rat <- scr_rat %>%
group_by(ID, picNum) %>%
filter(!any(is.na(logAmplitudes))) %>%
ungroup()
cor(scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1],
scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2],
method= "spearman")
#### end change alina
################################################################
##### new functions added: picture presentation / non-responder
AverageResponsesacrossruns<- 1# determine whether average across trials if set to zero takes the first run.
if (AverageResponsesacrossruns==1){
ntrials<-72
scrAlinacounZeros<-scrAlina%>%
filter(logAmplitudes==0)%>%
# filter(NumberOfTimePresented==1)%>%
select(ID,logAmplitudes)
VPZeros<-as.data.frame(table(scrAlinacounZeros$ID))
names(VPZeros)<- c("ID", "Freq")
}else{
ntrials<-36
scrAlinacounZeros<-scrAlina%>%
filter(logAmplitudes==0)%>%
filter(NumberOfTimePresented==1)%>%
select(ID,logAmplitudes)
VPZeros<-as.data.frame(table(scrAlinacounZeros$ID))
names(VPZeros)<- c("ID", "Freq")
}
removeNonResponders<-0
RespondersRate<- .33
if (removeNonResponders==1){
VPZerosfilt<-VPZeros%>% filter(Freq> ntrials-ntrials*RespondersRate)
scrAlina<-anti_join(scrAlina,VPZerosfilt, by = "ID" )
}
# df_ratAlina<-scrAlina%>%select(ID,picNum,arousal_rating) #%>%
# filter(ID!=201)%>%
# filter(ID!= 126 & ID!= 144) #filter nonresponders in any trial
# scr_rat<-inner_join(scrAlina,df_ratAlina, by= c("ID", "picNum"), keep=F)
#View(table(scr_rat$ID)); N = 252 with filtering, N = 166
#correlation between time presented 1 and two
cor(scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==1],
scr_rat$logAmplitudes[scr_rat$NumberOfTimePresented==2], method= "spearman")
#for the test, and given the relatively low correlation take only first presentation
if (AverageResponsesacrossruns==1){
scr_rat$arousal_rating<-as.numeric(scr_rat$arousal_rating)
scr_rat_1<-scr_rat%>%
group_by(ID,picNum)%>%
dplyr::summarise(logAmplitudes=mean(logAmplitudes, na.rm =T),
arousal_rating=mean(arousal_rating,na.rm=T))
scr_rat_1<-scr_rat_1%>%ungroup()
}else{scr_rat_1<-scr_rat%>%filter(NumberOfTimePresented==1)}
##############################################################
#for the test, and given the relatively low correlation take only first presentation
#scr_rat_1<-scr_rat%>%filter(NumberOfTimePresented==1)
## sort  participant, and arousal
scr_rat_1<- scr_rat_1%>%
arrange_at ("arousal_rating")%>%
arrange_at("ID")
#create a new variable that "counts the trials based on their arousal rating
j<-1
scr_rat_1$sortAro<-0
for (i in 1:nrow(scr_rat_1)){
if (i< nrow(scr_rat_1)){
if(scr_rat_1$ID[i]==  scr_rat_1$ID[i+1]){
scr_rat_1$sortAro[i]<-j
j <- j+1
}
else{
scr_rat_1$sortAro[i]<-j
j <-1
}
else {scr_rat_1$sortAro[i]<-j
}
PicEdaArosVAlina<-scr_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,logAmplitudes)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicEdaArosVAlina$logAmplitudes, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"SCR_SingleAlina"
sortType<- "Arousal"
# 1. based in amplitudes
RSMSingleValue(PicEdaArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
# RSM for Behavioral DAT
PicBehavArosVAlina<-scr_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,arousal_rating)%>%
rename(Behavioral= arousal_rating)
PicBehavArosVAlina$Behavioral<-as.numeric(PicBehavArosVAlina$Behavioral)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicBehavArosVAlina$Behavioral, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"BehavioralSingleAlina"
sortType<- "Arousal"
OriginalData<-PicBehavArosVAlina
#  Behav_Single_corr_prep_all
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ArousalRatings"
# old
#PermutationTest(SCR_Vector_I_corr_prep_all,Behav_Single_I_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
# changed in our zoom call
PermutationTest(SCR_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
#invAK
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"
VariableModel<- "ArousalRatings"
PermutationTest(SCR_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
# RSM for Behavioral DAT
PicBehavArosVAlina<-scr_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,arousal_rating)%>%
rename(Behavioral= arousal_rating)
PicBehavArosVAlina$Behavioral<-as.numeric(PicBehavArosVAlina$Behavioral)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicBehavArosVAlina$Behavioral, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
VariableType<-"BehavioralSingleAlina"
sortType<- "Arousal"
OriginalData<-PicBehavArosVAlina
#2. based on arousal ratings
RSMSingleValue(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirecterWeighted.csv", header=T, row.names="Cities.", sep=",") %>% as.matrix
colnames(data) <- gsub("\\.", " ", colnames(data))
# show data
tmp <- data %>% as.data.frame() %>% select(1,3,6) %>% .[c(1,3,6),]
tmp[is.na(tmp)] <- "-"
tmp %>% kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
View(tmp)
class(tmp)
View(SCR_SingleAlina_corr_prep_all)
View(SCR_RSM)
View(SCR_SingleAlina_corr_prep_all)
corr_prepPlot
#2. based on arousal ratings
RSMSingleValue(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
View(VPZeros)
corr_prepPlot<- corr_prep_all%>%
dplyr::select(var1, var2, mean_all)
VariableType
View(SCR_SingleAlina_corr_prep_all)
View(SCR_RSM)
View(BehavioralSingleAlina_corr_prep_all)
corrMatrixVpName
corr_prep_allName
corr_prep_all = BehavioralSingleAlina_corrMatrixVp
################################################################
#-------------- Plot RSM Matrix
mypalette<- colors()[c(73, 30, 28, 124, 635, 86,384,144, 148)]
corr_prepPlot<- corr_prep_all%>%
dplyr::select(var1, var2, mean_all)
corr_prep_all = BehavioralSingleAlina_corr_prep_all
################################################################
#-------------- Plot RSM Matrix
mypalette<- colors()[c(73, 30, 28, 124, 635, 86,384,144, 148)]
corr_prepPlot<- corr_prep_all%>%
dplyr::select(var1, var2, mean_all)
min<- floor_dec(min(corr_prepPlot[,3]),2)
max<-ceiling_dec( max(corr_prepPlot[,3][corr_prepPlot[,3] != max(corr_prepPlot[,3])]),2)
cols <- rev(rainbow(20)[-20])
plotRSM<-ggplot(data=corr_prepPlot, aes(x = var1, y = var2, fill = mean_all)) + #value2
geom_tile() +
labs(x = paste("Trials sorted by", sortType), y = paste("Trials sorted by", sortType), fill = "", title = "Correlation Matrix") +
coord_fixed() +
theme_minimal()+
scale_y_continuous(trans = "reverse")+
scale_fill_gradientn(colours=rev(mypalette),na.value = colors() [c(73)], #heat.colors(12)
breaks=c(min, max),labels=c(min, max),
limits=c(min,max))+ theme(legend.position="bottom")+
theme(text=element_text(family="Times", size=12))
plotRSM
View(corr_prepPlot)
# Perform hierarchical cluster analysis.
dend <- as.dist(data) %>%
hclust(method="ward.D") %>%
as.dendrogram()
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirecterWeighted.csv", header=T, row.names="Cities.", sep=",") %>% as.matrix
colnames(data) <- gsub("\\.", " ", colnames(data))
# show data
tmp <- data %>% as.data.frame() %>% select(1,3,6) %>% .[c(1,3,6),]
tmp[is.na(tmp)] <- "-"
tmp %>% kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
# Perform hierarchical cluster analysis.
dend <- as.dist(data) %>%
hclust(method="ward.D") %>%
as.dendrogram()
library(kableExtra)
tmp %>% kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
install.packages("fastmap")
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirecterWeighted.csv", header=T, row.names="Cities.", sep=",") %>% as.matrix
colnames(data) <- gsub("\\.", " ", colnames(data))
install.packages("fastmap")
library(kableExtra)
# show data
tmp <- data %>% as.data.frame() %>% select(1,3,6) %>% .[c(1,3,6),]
tmp[is.na(tmp)] <- "-"
library(dplyr)
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirecterWeighted.csv", header=T, row.names="Cities.", sep=",") %>% as.matrix
colnames(data) <- gsub("\\.", " ", colnames(data))
library(kableExtra)
# show data
tmp <- data %>% as.data.frame() %>% select(1,3,6) %>% .[c(1,3,6),]
tmp[is.na(tmp)] <- "-"
tmp %>% kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
library(fastmap)
library(kableExtra)
tmp[is.na(tmp)] <- "-"
tmp %>% kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F)
detach("package:fastmap", unload = TRUE)
# Load data
data(USArrests)
# Compute distances and hierarchical clustering
dd <- dist(scale(USArrests), method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
View(USArrests)
install.packages(c("factoextra", "dendextend"))
library(factoextra)
fviz_dend(hc, cex = 0.5)
fviz_dend(hc, cex = 0.5,
main = "Dendrogram - ward.D2",
xlab = "Objects", ylab = "Distance", sub = "")
fviz_dend(hc, cex = 0.5, horiz = TRUE)
fviz_dend(hc, k = 4,                 # Cut in four groups
cex = 0.5,                 # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE,  # color labels by groups
ggtheme = theme_gray()     # Change theme
)
View(hc)
dd
hc <- hclust(corr_prepPlot, method = "ward.D2")
hc <- hclust(corr_prepPlot[c(1:288),], method = "ward.D2")
test_df = corr_prepPlot[c(1:288)
test_df = corr_prepPlot[c(1:288),]
View(test_df)
hc <- hclust(test_df, method = "ward.D2")
View(USArrests)
View(PicBehavArosVAlina)
View(PicEdaAro)
View(PicEdaArosVAlina)
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
set.seed(1)
# create a data frame giving the hierarchical structure of your individuals
d1=data.frame(from="origin", to=paste("group", seq(1,10), sep=""))
d2=data.frame(from=rep(d1$to, each=10), to=paste("group", seq(1,100), sep="_"))
edges=rbind(d1, d2)
# create a vertices data.frame. One line per object of our hierarchy
vertices = data.frame(
name = unique(c(as.character(edges$from), as.character(edges$to))) ,
value = runif(111)
)
View(vertices)
View(edges)
# Make the plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) +
geom_edge_diagonal(colour="grey") +
scale_edge_colour_distiller(palette = "RdPu") +
geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2.7, alpha=1) +
geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) +
scale_colour_manual(values= mycolor) +
scale_size_continuous( range = c(0.1,7) ) +
theme_void() +
coord_polar()+
theme(
legend.position="none",
plot.margin=unit(c(0,0,0,0),"cm"),
) +
expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))
library(dendextend)
library(circlize)
# create a dendrogram
hc <- hclust(dist(datasets::mtcars))
View(hc)
mtcars
View(test_df)
num_rows <- 36
# Generate row names
row_names <- paste("picture", 1:num_rows, sep = "")
# Assign row names to the dataframe
repeated_row_names <- rep(paste("picture", 1:num_rows, sep = ""), each = num_rows)
repeated_row_names
tail(repeated_row_names)
36*36
# Assign row names to the dataframe
rownames(corr_prepPlot) <- repeated_row_names
num_rows <- 36
# Generate row names
repeated_row_names <- rep(paste("picture", 1:num_rows, sep = ""), each = num_rows)
# Assign row names to the dataframe
rownames(corr_prepPlot) <- repeated_row_names
my_data = corr_prepPlot
# Select the columns for clustering
data_for_clustering <- my_data[, c("var 1", "var2", "mean")]
# Select the columns for clustering
data_for_clustering <- my_data[, c("var1", "var2", "mean_all")]
# Perform hierarchical clustering
dist_matrix <- dist(data_for_clustering)  # Calculate the distance matrix
hc <- hclust(dist_matrix)  # Perform hierarchical clustering
# Plot the dendrogram
plot(hc, main = "Dendrogram of Clustering")
# Convert hierarchical clustering object to a dendrogram
dendro <- as.dendrogram(hc)
# Create a circular dendrogram
par(mar = c(1, 1, 1, 1))  # Set margin for circular plot
circos.dendrogram(dendro, main = "Circular Dendrogram")
library(dendextend)
library(circlize)
my_data = corr_prepPlot
# Select the columns for clustering
data_for_clustering <- my_data[, c("var1", "var2", "mean_all")]
# Perform hierarchical clustering
dist_matrix <- dist(data_for_clustering)  # Calculate the distance matrix
hc <- hclust(dist_matrix)  # Perform hierarchical clustering
# Plot the dendrogram
#plot(hc, main = "Dendrogram of Clustering")
# Convert hierarchical clustering object to a dendrogram
dendro <- as.dendrogram(hc)
# Create a circular dendrogram
par(mar = c(1, 1, 1, 1))  # Set margin for circular plot
circos.dendrogram(dendro, main = "Circular Dendrogram")
circos.dendrogram(dendro)
circos_dendrogram(dendro)
dendro <- dendro %>%
color_branches(k=4) %>%
color_labels
dendro
plot(dendro)
# Create a circular dendrogram
# plot the radial plot
par(mar = rep(0,4))
# circlize_dendrogram(dend, dend_track_height = 0.8)
circlize_dendrogram(dendro, labels_track_height = NA, dend_track_height = .4)
View(hc)
my_data = test_df
# Select the columns for clustering
data_for_clustering <- my_data[, c("var1", "var2", "mean_all")]
# Perform hierarchical clustering
dist_matrix <- dist(data_for_clustering)  # Calculate the distance matrix
hc <- hclust(dist_matrix)  # Perform hierarchical clustering
# Convert hierarchical clustering object to a dendrogram
dendro <- as.dendrogram(hc)
dendro <- dendro %>%
color_branches(k=4) %>%
color_labels
plot(dendro)
# Create a circular dendrogram
# plot the radial plot
par(mar = rep(0,4))
# circlize_dendrogram(dend, dend_track_height = 0.8)
circlize_dendrogram(dendro, labels_track_height = NA, dend_track_height = .4)
View(test_df)
