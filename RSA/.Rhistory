aes(colour = Q,
size = 3 ,
# dodge.width = 0.9, varwidth = TRUE
),
)+
stat_summary(fun="mean",color="red", geom="point", size=5)+
# geom_point(aes(colour = cut(Q_CTQ_sum, c(-Inf, 30, 45, Inf))),
#            size = 3) +
# geom_tile(aes(fill = Q))+
scale_colour_gradientn(colours = terrain.colors(10))+
# annotate("text", x=.75, y=max(tableCorrelation$value)+mean(tableCorrelation$value), label= paste("p-value:",onewayTTest[["p.value"]], sep = " "),
#          col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=max(tableCorrelationPlot$Correlation), label= paste("p-value:",onewayTTest[["p.value"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=mean(tableCorrelationPlot$Correlation),#*3,
label= paste("t-value:",onewayTTest[["statistic"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=min(tableCorrelationPlot$Correlation),#*4,
label= paste("Mean:",mean(tableCorrelationPlot$Correlation), sep = " "),
col="blue", size=5, parse=TRUE)
plotDistribution
}
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#---------------- RSM Individual regression
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# tableData<-SCR_Single_corr_prep_all
#   tableModel1<-Behav_Single_invAK_corr_prep_all
#   tableModel2<-Behav_Single_corr_prep_all
#   variableOriginal<-"SCRSingle"
#   VariableModel1<-"AroRatingsinvAK"
#   VariableModel2<-"AroRatingsNN"
RSMIndividualRegression<-function(OriginalData,tableModel1,tableModel2,VariableOriginal,VariableModel1,VariableModel2){
#Select the biggest table
if (ncol(tableModel1)>ncol(tableData)){
tableMother<-tableData
tableDaugther<-tableModel1
}else {tableMother<-tableModel1
tableDaugther<-tableData}
tableCousin<-tableModel2
# tableCorrelation<-as_tibble(vector(mode='numeric',length=ncol(tableMother)))
tableCorrelation<-as_tibble(matrix(ncol=3, nrow=ncol(tableMother)-3))
names(tableCorrelation)<-c("VP",paste("Similarity",VariableOriginal,VariableModel1,sep="_"),
paste("Similarity",VariableOriginal,VariableModel,sep="_"))
tableDaugther2<-tableDaugther%>%
filter(tableDaugther$var1>tableDaugther$var2)
tableMother2<-tableMother%>%
filter(tableMother$var1>tableMother$var2)
tableCousin2<-tableCousin%>%
filter(tableCousin$var1>tableCousin$var2)
for(i in 3:(ncol(tableMother)-1)) { #starts in column three
single<-tableMother2[,i]
single[,2]<-tableDaugther2[,which( colnames(tableDaugther2)==names(tableMother2[i]))]
single[,3]<-tableCousin2[,which( colnames(tableCousin2)==names(tableMother2[i]))]
names(single)<-c("Original","M1","M2")
modelM1<- lm(M1~M2, data=single )
modelM2<- lm(M2~M1, data=single )
corrspSingleM1<-as_tibble(matrix(ncol=3, nrow=nrow(single)))
corrspSingleM1[,1]<-single$Original
corrspSingleM1[,2]<-modelM1[["residuals"]]
corrspSingleM1[,3]<-modelM2[["residuals"]]
corrOriModelsRes<-rcorr(as.matrix(corrspSingleM1), type="spearman")
tableCorrelation[i-2,2]<-corrOriModelsRes$r[2]
tableCorrelation[i-2,3]<-corrOriModelsRes$r[3]
tableCorrelation[i-2,1]<-names(tableMother2[i])
}
tableCorrelation<-tableCorrelation%>%drop_na()
corrMatrixVpName<-paste(variableOriginal,VariableModel1,VariableModel2,"tableRegression",sep= "_")
assign(corrMatrixVpName, tableCorrelation,envir = globalenv())
tableCorrelationPlot<-tableCorrelation%>% select(-VP)
tableCorrelationPlot$x<-1
tableCorrelationPlotM<-colMeans(tableCorrelationPlot)
#Plot regression1
onewayTTestM1<- t.test(tableCorrelation[,2], mu = 0, alternative = "two.sided")
plotDistributionM1 <- ggplot(tableCorrelationPlot, aes_string(y = names(tableCorrelationPlot[1]),x = "x")) +
geom_violin(position = position_dodge(width = 0.9)) +
geom_quasirandom(dodge.width = 0.9, varwidth = TRUE)+
stat_summary(fun="mean",color="red", geom="point", size=5)+
scale_colour_gradientn(colours = terrain.colors(10))+
annotate("text", x=.75, y=max(tableCorrelationPlot[,1]), label= paste("p-value:",onewayTTestM1[["p.value"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=tableCorrelationPlotM[1],#*3,
label= paste("t-value:",onewayTTestM1[["statistic"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=min(tableCorrelationPlot[,1]),#*4,
label= paste("Mean:",tableCorrelationPlotM[1], sep = " "),
col="blue", size=5, parse=TRUE)+
ggtitle(names(tableCorrelationPlot[1]))
#Plot regression1
onewayTTestM2<- t.test(tableCorrelation[,3], mu = 0, alternative = "two.sided")
plotDistributionM2 <- ggplot(tableCorrelationPlot, aes_string(y = names(tableCorrelationPlot[2]),x = "x")) +
geom_violin(position = position_dodge(width = 0.9)) +
geom_quasirandom(dodge.width = 0.9, varwidth = TRUE)+
stat_summary(fun="mean",color="red", geom="point", size=5)+
scale_colour_gradientn(colours = terrain.colors(10))+
annotate("text", x=.75, y=max(tableCorrelationPlot[,2]), label= paste("p-value:",onewayTTestM2[["p.value"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=tableCorrelationPlotM[2],#*3,
label= paste("t-value:",onewayTTestM2[["statistic"]], sep = " "),
col="blue", size=5, parse=TRUE)+
annotate("text", x=.75, y=min(tableCorrelationPlot[,2]),#*4,
label= paste("Mean:",tableCorrelationPlotM[2], sep = " "),
col="blue", size=5, parse=TRUE)+
ggtitle(names(tableCorrelationPlot[2]))
ggarrange(plotDistributionM1,plotDistributionM2 ,
labels = c("A", "B"),
ncol = 2, nrow = 1)
}
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#-----------------------------Permutation test with regression-----------------------------------------------
#----------------------------------------------------------------------------
# # #PermutationwithRegression
# OriginalData<- SCR_SingleAlina_corr_prep_all
# ModelData1<-BehavioralSingleAlina_SV_invAK_corr_prep_all
# ModelData2<- BehavioralSingleAlina_SV_NN_corr_prep_all
# whichModel<- c("ModelData1")#,"ModelData2")
# VariableOriginal<-"SCRinvAKAroSingleValue"
# VariableModel2<- "NNAro"
# VariableModel1<- "invAKAro"
# seedPer<-49
# nPermutations<-100
# PlotRSMReg<-1
# Category = "VP"
PermutationTestRegModels<-function(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2,
Category,nPermutations,seedPer,PlotRSMReg){
#variable whichModel would define which model to operate. because that if does not work, both models are operated
OriginalData<-OriginalData%>%dplyr::select(var1,var2,mean_all)%>%
filter(OriginalData$var1>OriginalData$var2)%>%
filter(var1 > 0)
OriginalData$RSA<-VariableOriginal
Models<- inner_join(ModelData1,ModelData2, by=c('var1', 'var2'),suffix= c("M1","M2"))
modelM1<- lm(mean_allM1~mean_allM2, data=Models )
modelM2<- lm(mean_allM2~mean_allM1, data=Models )
for (ii in 1:length(whichModel)) {
# if (whichModel[ii]== deparse(substitute(ModelData1))){ # does not work
#Determine which permutation to run, depending on whichModel variable
#EachModelSeparately
ModelData1_2Plot<-ModelData1
ModelData1_2Plot$mean_all<-modelM1[["residuals"]]
ModelData1$mean_all<-modelM1[["residuals"]]
ModelData1s<-ModelData1%>%dplyr::select(var1,var2,mean_all)
ModelData1s<-ModelData1s%>%
filter(ModelData1s$var1>ModelData1s$var2)%>%
filter(var1 > 0)
ModelData1s$RSA<-VariableModel1
CombinedOriginalModel1<- rbind(OriginalData, ModelData1s)
test.cor<- cor(CombinedOriginalModel1$mean_all[CombinedOriginalModel1$RSA==VariableOriginal],
CombinedOriginalModel1$mean_all[CombinedOriginalModel1$RSA==VariableModel1], method= "spearman")
set.seed(seedPer)
Perm.test.corr <- rep(0, nPermutations) #matrix were to save the permutations
n <- length(CombinedOriginalModel1$RSA)
# the variable we will resample from
#     (note, could use the labels(RSA) too, and "shuffle this")
variable <- CombinedOriginalModel1$RSA
# initialize a matrix to store the permutation of the name
PermSamplesOther <- matrix(0, nrow=n, ncol=nPermutations)
# now, get those permutation samples from the labels, using a loop
for(i in 1:nPermutations){
PermSamplesOther[,i] <- sample(variable, size= n, replace=FALSE)
}
#Loop to perform the nPermutations permutations
for (i in 1:nPermutations){
# calculate the perm-test-stat1 and save it
Perm_test_corr_sort<- CombinedOriginalModel1%>%
select ( - RSA)
Perm<- PermSamplesOther[,i]
Perm_test_corr_sort <- data.frame(Perm_test_corr_sort, Perm)
Perm_test_corr_sort<-as_tibble(Perm_test_corr_sort)%>%
arrange(var1)%>%
arrange(var2)%>%
arrange(Perm)
Perm.test.corr[i] <- cor(Perm_test_corr_sort$mean_all[Perm_test_corr_sort$Perm==VariableOriginal],
Perm_test_corr_sort$mean_all[Perm_test_corr_sort$Perm==VariableModel1],method = c("spearman"))
}
Perm.test.corr<- as_tibble(Perm.test.corr)
Perm.test.corr<- Perm.test.corr%>%
arrange_at(1)
lim<-Perm.test.corr[nPermutations/100*95,1]
lim<-as.numeric(lim)
plot.perm<-
ggplot(Perm.test.corr, aes(x=value)) +
geom_histogram(
bins= 20,
fill=I("blue"),
col=I("black"),
alpha=I(.2))+
geom_vline(xintercept=lim, linetype="dashed",
color = "black", size=2 )+
geom_vline(xintercept=test.cor,
color = "red", size=2 )+ theme(text=element_text(family="Times", size=12),
axis.text=element_text(size=25),axis.line.y= element_line(),
axis.line.x= element_line())+
theme(legend.position="bottom")+
theme(#panel.grid.minor = element_blank(),
panel.background = element_blank())
significanceTest<- which(Perm.test.corr>test.cor)
permPValue<-(nPermutations-significanceTest[1])/nPermutations
bf =correlationBF(CombinedOriginalModel1$mean_all[CombinedOriginalModel1$RSA==VariableOriginal],
CombinedOriginalModel1$mean_all[CombinedOriginalModel1$RSA==VariableModel1],nullInterval = c(Perm.test.corr[1,], Perm.test.corr[nPermutations/100*95,]))
# bf
bfevidence<- bf[2] / bf[1]
# View(bfevidence)
template <- "A permutation Test was was conducted to compare {VariableOriginal} and  {VariableModel1}.
The relation between both RMS was: {test.cor}. The permutation test with percentil 95 was {lim}, the relationship had a p-value of {permPValue}.
the BF10 index was: {bfevidence} "
template2<-glue::glue(
template,
VariableOriginal   = VariableOriginal,
VariableModel     = VariableModel1,
test.cor   =round( test.cor,2),
lim     = round(lim,2),
permPValue     = permPValue,
bfevidence= round(bfevidence@bayesFactor[["bf"]],2)
)
if (PlotRSMReg==1){
#-------------- Plot RSM Matrix
mypalette<- colors()[c(73, 30, 28, 124, 635, 86,384,144, 148)]
corr_prepPlot<- ModelData1_2Plot%>%
dplyr::select(var1, var2, mean_all)
min<- floor_dec(min(corr_prepPlot[,3]),5)
max<-ceiling_dec( max(corr_prepPlot[,3][corr_prepPlot[,3] != max(corr_prepPlot[,3])]),5)
cols <- rev(rainbow(20)[-20])
plotRSM1<-ggplot(data=corr_prepPlot, aes(x = var1, y = var2, fill = mean_all)) + #value2
geom_tile() +
labs(x = paste(Category, "sorted by", VariableModel1), y = paste(Category, "sorted by", VariableModel1), fill = "", title = "Similarity Matrix") +
coord_fixed() +
theme_minimal()+
scale_y_continuous(trans = "reverse")+
scale_fill_gradientn(colours=rev(mypalette),na.value = colors() [c(73)], #heat.colors(12)
breaks=c(min, max),labels=c(min, max),
limits=c(min,max))+ theme(legend.position="bottom")+
theme(text=element_text(family="Times", size=12))
}
# }  else if (whichModel[ii]== deparse(substitute(ModelData2))){ #does not work....
#EachModelSeparately
ModelData2_2Plot<-ModelData2
ModelData2_2Plot$mean_all<-modelM2[["residuals"]]
ModelData2$mean_all<-modelM2[["residuals"]]
ModelData2<-ModelData2%>%dplyr::select(var1,var2,mean_all)%>%
filter(ModelData2$var1>ModelData2$var2)%>%
filter(var1 > 0)
ModelData2$RSA<-VariableModel2
CombinedOriginalModel2<- rbind(OriginalData, ModelData2)
test.cor<- cor(CombinedOriginalModel2$mean_all[CombinedOriginalModel2$RSA==VariableOriginal],
CombinedOriginalModel2$mean_all[CombinedOriginalModel2$RSA==VariableModel2], method= "spearman")
set.seed(seedPer)
Perm.test.corr <- rep(0, nPermutations) #matrix were to save the permutations
n <- length(CombinedOriginalModel2$RSA)
# the variable we will resample from
#     (note, could use the labels(RSA) too, and "shuffle this")
variable <- CombinedOriginalModel2$RSA
# initialize a matrix to store the permutation of the name
PermSamplesOther <- matrix(0, nrow=n, ncol=nPermutations)
# now, get those permutation samples from the labels, using a loop
for(i in 1:nPermutations){
PermSamplesOther[,i] <- sample(variable, size= n, replace=FALSE)
}
#Loop to perform the nPermutations permutations
for (i in 1:nPermutations){
# calculate the perm-test-stat1 and save it
Perm_test_corr_sort<- CombinedOriginalModel2%>%
select ( - RSA)
Perm<- PermSamplesOther[,i]
Perm_test_corr_sort <- data.frame(Perm_test_corr_sort, Perm)
Perm_test_corr_sort<-as_tibble(Perm_test_corr_sort)%>%
arrange(var1)%>%
arrange(var2)%>%
arrange(Perm)
Perm.test.corr[i] <- cor(Perm_test_corr_sort$mean_all[Perm_test_corr_sort$Perm==VariableOriginal],
Perm_test_corr_sort$mean_all[Perm_test_corr_sort$Perm==VariableModel2],method = c("spearman"))
}
Perm.test.corr<- as_tibble(Perm.test.corr)
Perm.test.corr<- Perm.test.corr%>%
arrange_at(1)
lim<-Perm.test.corr[nPermutations/100*95,1]
lim<-as.numeric(lim)
plot.perm2<-
ggplot(Perm.test.corr, aes(x=value)) +
geom_histogram(
bins= 20,
fill=I("blue"),
col=I("black"),
alpha=I(.2))+
geom_vline(xintercept=lim, linetype="dashed",
color = "black", size=2 )+
geom_vline(xintercept=test.cor,
color = "red", size=2 )+ theme(text=element_text(family="Times", size=12),
axis.text=element_text(size=25),axis.line.y= element_line(),
axis.line.x= element_line())+
theme(legend.position="bottom")+
theme(#panel.grid.minor = element_blank(),
panel.background = element_blank())
significanceTest<- which(Perm.test.corr>test.cor)
permPValue<-(nPermutations-significanceTest[1])/nPermutations
bf =correlationBF(CombinedOriginalModel2$mean_all[CombinedOriginalModel2$RSA==VariableOriginal],
CombinedOriginalModel2$mean_all[CombinedOriginalModel2$RSA==VariableModel2],nullInterval = c(Perm.test.corr[1,], Perm.test.corr[nPermutations/100*95,]))
# bf
bfevidence<- bf[2] / bf[1]
# View(bfevidence)
template <- "A permutation Test was was conducted to compare {VariableOriginal} and  {VariableModel2}.
The relation between both RMS was: {test.cor}. The permutation test with percentil 95 was {lim}, the relationship had a p-value of {permPValue}.
the BF10 index was: {bfevidence} "
template3<-glue::glue(
template,
VariableOriginal   = VariableOriginal,
VariableModel     = VariableModel2,
test.cor   =round( test.cor,2),
lim     = round(lim,2),
permPValue     = permPValue,
bfevidence= round(bfevidence@bayesFactor[["bf"]],2)
)
if (PlotRSMReg==1){
#-------------- Plot RSM Matrix
mypalette<- colors()[c(73, 30, 28, 124, 635, 86,384,144, 148)]
corr_prepPlot<- ModelData2_2Plot%>%
dplyr::select(var1, var2, mean_all)
min<- floor_dec(min(corr_prepPlot[,3]),5)
max<-ceiling_dec( max(corr_prepPlot[,3][corr_prepPlot[,3] != max(corr_prepPlot[,3])]),5)
cols <- rev(rainbow(20)[-20])
plotRSM2<-ggplot(data=corr_prepPlot, aes(x = var1, y = var2, fill = mean_all)) + #value2
geom_tile() +
labs(x = paste(Category, "sorted by", VariableModel2), y = paste(Category, "sorted by", VariableModel2), fill = "", title = "Similarity Matrix") +
coord_fixed() +
theme_minimal()+
scale_y_continuous(trans = "reverse")+
scale_fill_gradientn(colours=rev(mypalette),na.value = colors() [c(73)], #heat.colors(12)
breaks=c(min, max),labels=c(min, max),
limits=c(min,max))+ theme(legend.position="bottom")+
theme(text=element_text(family="Times", size=12))
}
#}  if that does not work whichModel
}
if (PlotRSMReg==1){
mylist<-list (plot.perm,plotRSM1, template2, plot.perm2, plotRSM2, template3)
}  else{  mylist<-list (plot.perm, template2, plot.perm2, template3)
}
return(mylist)
}
##Libraries
library(base)
library(psycho)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(fs)
library (lme4)
library(lmerTest)
library(sjPlot)
library(rstatix)
library(Hmisc)
# install.packages("extrafont")
library(extrafont)
library (ggbeeswarm)
library(BayesFactor)
library(bayestestR)
library(glue)
#################################################
### Load Fonts for figures
#################################################
#font_import()
loadfonts(device="win")       #Register fonts for Windows bitmap output
fonts()
windowsFonts(Times=windowsFont("Times"))
load("./data/allData_proofed.Rdata")
load("./data/df_rat.Rdata")
emg$ID = sub('.*(\\d{3}).*', '\\1', emg$Subject)
emg_sub =emg %>% select(Subject, ID, project, Stimulus,TAmplitudes,NumberOfTimesPresented) %>% unique() # to be added  Q_LTE_di, Q_CTQ_di, Q_STAIT_sum, Q_BDI_sum
emg_sub$picNum<-str_sub(emg_sub$Stimulus,11,-1L)
emg_sub$Stimulus = NULL
emg_sub$ID = gsub("[^0-9.-]", "",emg_sub$ID)
emg_sub$ID = gsub("^0", "", emg_sub$ID)
emg_sub$ID = gsub("^0", "", emg_sub$ID)
# prep df_rat
df_rat$picNum<-str_sub(df_rat$picture,1,6)
df_rat$picture = NULL
df_rat_emg = merge(emg_sub, df_rat, by = c("ID", "project", "picNum"))
#detach(package:plyr) # if "sanity" is empty
sanity = df_rat_emg %>% group_by(Subject) %>% tally()
### why log amplitudes?
emgAlina<-df_rat_emg%>%select(ID,project, picNum,TAmplitudes,NumberOfTimesPresented, valence_rating)
# get old ID structure back, if needed
emgAlina$ID <- paste(emgAlina$project ,emgAlina$ID ,  sep = "_")
emgAlina$project = NULL
emg_rat = emgAlina
## sort  participant, and valence
emg_rat_1<- emg_rat%>%
arrange_at ("valence_rating")%>%
arrange_at("ID")
#create a new variable that "counts the trials based on their arousal rating
j<-1
emg_rat_1$sortAro<-0
for (i in 1:nrow(emg_rat_1)){
if (i< nrow(emg_rat_1)){
if(emg_rat_1$ID[i]==  emg_rat_1$ID[i+1]){
emg_rat_1$sortAro[i]<-j
j <- j+1
}
else{
emg_rat_1$sortAro[i]<-j
j <-1
}
}
else {emg_rat_1$sortAro[i]<-j
}
}
PicEdaArosVAlina<-emg_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,TAmplitudes)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicEdaArosVAlina$TAmplitudes, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
# 1.
VariableType<-"emg_SingleAlina"
sortType<- "Valence"
RSMSingleValue(PicEdaArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
#############################
# RSM for Behavioral DAT
PicBehavArosVAlina<-emg_rat_1%>%
dplyr:: rename(sort= sortAro)%>%
dplyr::select(ID, sort,valence_rating)%>%
rename(Behavioral= valence_rating)
PicBehavArosVAlina$Behavioral<-as.numeric(PicBehavArosVAlina$Behavioral)
# OriginalData<-PicEdaArosV
MaxValue<- max(PicBehavArosVAlina$Behavioral, na.rm=T)
nVariables<-36 # this variable defines the number of cells e.g., pictures presented
CharContainingNumberFromVector<-4 #Character containing number from variables coding vector.
#e.g., EDA1, EDA2, EDA3... the character is 4: 1, 2, 3...
### Select the variables needed for the loop: VP, Variable sorting, Vector values
#2.
VariableType<-"BehavioralSingleAlina"
sortType<- "Valence"
OriginalData<-PicBehavArosVAlina
RSMSingleValue(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
# 3.
VariableType<-"BehavioralSingleAlina_invAK"
sortType<- "Valence"
RSMSingleValueAK(PicBehavArosVAlina,nVariables,CharContainingNumberFromVector,VariableType,sortType, MaxValue)
#  Behav_Single_corr_prep_all
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector" # also EMG?
VariableModel<- "ValenceRatings"
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
#AK
seedPer<-55
nPermutations<-10000
VariableOriginal<-"SCR_Vector"# also EMG?
VariableModel<- "ValenceRatings"
#the output matrices for the Permutation test are created in the "RSM" functions
#PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
PermutationTest(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_invAK_corr_prep_all,VariableOriginal,VariableModel,nPermutations,seedPer)
Model<-"SCRSingle"
Data<- "SCRValence"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_corr_prep_all,Model,Data)
Model<-"SCRSingle"
Data<- "SCRValence"
RSMIndividual(emg_SingleAlina_corr_prep_all,BehavioralSingleAlina_invAK_corr_prep_all,Model,Data)
BehavioralSingleAlina_corrMatrixVp
###########################################################
###########################################################
# Regression analyses, 28.08.2023
###########################################################
###########################################################
# line 874
OriginalData<- emg_SingleAlina_corr_prep_all
ModelData1<- BehavioralSingleAlina_invAK_corr_prep_all #BehavioralSingleAlina_SV_invAK_corr_prep_all
ModelData2<- BehavioralSingleAlina_corr_prep_all #BehavioralSingleAlina_SV_NN_corr_prep_all
whichModel<- c("ModelData1")#,"ModelData2")
VariableOriginal<- "SCRinvAKAroSingleValue" #"SCRinvAKAroSingleValue"
VariableModel2<- "NNAro"
VariableModel1<- "invAKAro"
seedPer<-49
nPermutations<-100
PlotRSMReg<-1
Category = "VP"
PermutationTestRegModels<-(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2,
PermutationTestRegModels<-(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
PermutationTestRegModels(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
nPermutations<-10000
PlotRSMReg<-1
Category = "VP"
PermutationTestRegModels(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
# line 874
OriginalData<- emg_SingleAlina_corr_prep_all
ModelData1<- BehavioralSingleAlina_invAK_corr_prep_all #BehavioralSingleAlina_SV_invAK_corr_prep_all
ModelData2<- BehavioralSingleAlina_corr_prep_all #BehavioralSingleAlina_SV_NN_corr_prep_all
whichModel<- c("ModelData1")#,"ModelData2")
VariableOriginal<- "SCRinvAKAroSingleValue" #"SCRinvAKAroSingleValue"
VariableModel2<- "NNAro"
VariableModel1<- "invAKAro"
seedPer<-49
nPermutations<-10000
PlotRSMReg<-1
Category = "VP"
PermutationTestRegModels(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
VariableModel2<- "NNVal"
VariableModel1<- "invAKVal"
seedPer<-49
nPermutations<-10000
PlotRSMReg<-1
Category = "VP"
PermutationTestRegModels(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
VariableModel1<- "AKVal"
seedPer<-49
nPermutations<-10000
PlotRSMReg<-1
Category = "VP"
PermutationTestRegModels(OriginalData,ModelData1,ModelData2,VariableOriginal,VariableModel1,VariableModel2, Category,nPermutations,seedPer,PlotRSMReg)
